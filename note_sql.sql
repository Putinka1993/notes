-- Patterns


-- ABC_XYZ amount and revenue

--–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø ABC-XYZ –∞–Ω–∞–ª–∏–∑–∞
--AX ‚Äî –±–æ–ª—å—à–∞—è –¥–æ–ª—è –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å.
--AY ‚Äî –±–æ–ª—å—à–∞—è –¥–æ–ª—è –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏, –∫–æ–ª–µ–±–ª—é—â–∏–π—Å—è —Å–ø—Ä–æ—Å.
--AZ ‚Äî –±–æ–ª—å—à–∞—è –¥–æ–ª—è –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏, –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Å–ø—Ä–æ—Å.
--BX ‚Äî —Å—Ä–µ–¥–Ω–∏–µ –æ–±—ä—ë–º—ã –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å.
--BY ‚Äî —Å—Ä–µ–¥–Ω–∏–µ –æ–±—ä—ë–º—ã –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏, –∫–æ–ª–µ–±–ª—é—â–∏–π—Å—è —Å–ø—Ä–æ—Å.
--BZ ‚Äî —Å—Ä–µ–¥–Ω–∏–µ –æ–±—ä—ë–º—ã –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏, –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Å–ø—Ä–æ—Å.
--CX ‚Äî –º–∞–ª–æ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å.
--CY ‚Äî –º–∞–ª–æ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏, –∫–æ–ª–µ–±–ª—é—â–∏–π—Å—è —Å–ø—Ä–æ—Å.
--CZ ‚Äî –º–∞–ª–æ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏, –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Å–ø—Ä–æ—Å.

-- —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü , –ø–æ—Ç–æ–º –æ–±—å–µ–¥–µ–Ω–∏—Ç—å –∏—Ö –ø–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É –ø–æ–ª—é
-- select
--	abc.name ,
--	abc.abc_amount || xyz.XYZ as abc_xyz_amount ,
--	abc.abc_revenue || xyz.XYZ as abc_xyz_revenue
--from
--	result_abc as abc
--	join result_xyz as xyz
--		on xyz.name = abc.name
--order by
--	abc_xyz_revenue

--                                     XYZ COV(–∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏)

--–¶–µ–ª—å: –æ—Ü–µ–Ω–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞ (–≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂).
--	‚Ä¢	X ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å
--	‚Ä¢	Y ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ –∫–æ–ª–µ–±–ª—é—â–∏–π—Å—è
--	‚Ä¢	Z ‚Äî —Ö–∞–æ—Ç–∏—á–Ω—ã–π, –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π
--
--üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, –ª–æ–≥–∏—Å—Ç–∏–∫–∞.
--–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤:
--
--–ì—Ä—É–ø–ø–∞ "X" --> —Ç–æ–≤–∞—Ä—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–æ 10% –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ;
--–ì—Ä—É–ø–ø–∞ "Y" --> —Ç–æ–≤–∞—Ä—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –¥–æ 20% –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ;
--–ì—Ä—É–ø–ø–∞ "Z" --> –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.
--–ü–æ–¥—Å–∫–∞–∑–∫–∏:
--
--–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –ø—Ä–æ–¥–∞–∂–∏, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –ø–∏—Ü—Ü—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü;
--–ü—Ä–∏–≥–æ–¥—è—Ç—Å—è –æ–±–æ–±—â–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è;
--–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
--–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: stddev_pop;
--–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: avg.
--–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ / —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ";
--–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.

with amount_table as (
	select
		month_year ,
		month ,
		name ,
		sum(quantity) as amount
	from
		pizza_full_data pfd
	group by
		month_year ,
		month ,
		name
	order by
		month_year ,
		name
), cov_table as (
	select
		name ,
		round(stddev_pop(amount) over(partition by name) / avg(amount) over(partition by name), 3) as cov ,
		case
			when round(stddev_pop(amount) over(partition by name) / avg(amount) over(partition by name), 3) <= 0.1
				then 'X'
			when round(stddev_pop(amount) over(partition by name) / avg(amount) over(partition by name), 3) <= 0.20
				then 'Y'
			else 'Z'
		end as XYZ
	from
		amount_table
	order by
		name
)
select
	name ,
	min(cov) as cov ,
	XYZ
from
	cov_table
group by
	name ,
	XYZ

    
-- =============================================
-- ABC-–∞–Ω–∞–ª–∏–∑ —Å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –ø–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º
-- =============================================
    
-- –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
WITH agregation_table AS (
    SELECT
        d.dr_ndrugs AS ndrugs,        -- –ù–∞–∑–≤–∞–Ω–∏–µ/–∫–æ–¥ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        d.dr_czak AS purch,           -- –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
        d.dr_croz AS retail,          -- –†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
        SUM(d.dr_kol) AS sum_count,   -- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        SUM(d.dr_croz * d.dr_kol) AS sum_retail, -- –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂
        SUM(d.dr_czak * d.dr_kol) AS sum_purch,  -- –°—É–º–º–∞ –∑–∞–∫—É–ø–∫–∏
        ROUND(SUM(d.dr_croz * d.dr_kol - d.dr_czak * d.dr_kol) / SUM(d.dr_croz * d.dr_kol), 2) * 100 AS perc_margin
    FROM drugs d
    GROUP BY
        d.dr_ndrugs,
        d.dr_czak,
        d.dr_croz
) -- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å ABC-–∞–Ω–∞–ª–∏–∑–æ–º
, final_table AS (
    SELECT
        ndrugs,
        purch,
        retail,
        sum_count,
        ROUND(sum_count / SUM(sum_count) OVER() * 100.0, 2) AS perc_count,
        ROUND(SUM(sum_count) OVER(ORDER BY sum_count DESC) / SUM(sum_count) OVER() * 100.0, 2) AS cumsum_COUNT,
        CASE
            WHEN SUM(sum_count) OVER(ORDER BY sum_count DESC) / SUM(sum_count) OVER() * 100.0 <= 80 THEN 'A'
            WHEN SUM(sum_count) OVER(ORDER BY sum_count DESC) / SUM(sum_count) OVER() * 100.0 <= 95 THEN 'B'
            ELSE 'C'
        END AS ABC_count_purch,
        ROUND(sum_retail / SUM(sum_retail) OVER() * 100.0, 2) AS perc_RETAIL,
        ROUND(SUM(sum_retail) OVER(ORDER BY sum_retail DESC) / SUM(sum_retail) OVER() * 100.0, 2) AS cumsum_RETAIL,
        CASE
            WHEN SUM(sum_retail) OVER(ORDER BY sum_retail DESC) / SUM(sum_retail) OVER() * 100.0 <= 80 THEN 'A'
            WHEN SUM(sum_retail) OVER(ORDER BY sum_retail DESC) / SUM(sum_retail) OVER() * 100.0 <= 95 THEN 'B'
            ELSE 'C'
        END AS ABC_retail,
        perc_margin,
        ROUND(perc_margin / SUM(perc_margin) OVER() * 100.0, 2) AS portion_MARGIN,
        ROUND(SUM(perc_margin) OVER(ORDER BY perc_margin DESC) / SUM(perc_margin) OVER() * 100.0, 2) AS cumsum_MARGIN,
        CASE
            WHEN ROUND(SUM(perc_margin) OVER(ORDER BY perc_margin DESC) / SUM(perc_margin) OVER() * 100.0, 2) <= 80 THEN 'A'
            WHEN ROUND(SUM(perc_margin) OVER(ORDER BY perc_margin DESC) / SUM(perc_margin) OVER() * 100.0, 2) <= 95 THEN 'B'
            ELSE 'C'
        END AS ABC_margin
    FROM agregation_table
) -- –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
SELECT
    ndrugs,
    purch,
    retail,
    sum_count,
    perc_margin,
    ABC_count_purch,
    ABC_retail,
    ABC_margin
FROM final_table
ORDER BY
    ABC_margin ASC,
    ABC_retail ASC,
    ABC_count_purch ASC,
    perc_margin DESC;
    

üîπ –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:
	1.	perc_margin ‚Äî –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞.
	2.	portion_MARGIN ‚Äî –¥–æ–ª—è –æ—Ç —Å—É–º–º–∞—Ä–Ω–æ–π –º–∞—Ä–∂–∏ –≤—Å–µ—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.
	3.	ABC –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Äî A/B/C –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, —Ä–æ–∑–Ω–∏—Ü–µ –∏ –º–∞—Ä–∂–µ.
	4.	–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é, –ø–æ—Ç–æ–º –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É.




--                                     ABC amount and revenue

--–¶–µ–ª—å: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–∫–ª–∞–¥—É –≤ –ø—Ä–∏–±—ã–ª—å/–≤—ã—Ä—É—á–∫—É.
    --	‚Ä¢	A ‚Äî —Å–∞–º—ã–µ —Ü–µ–Ω–Ω—ã–µ (‚âà80% –ø—Ä–∏–±—ã–ª–∏, ‚âà20% —Ç–æ–≤–∞—Ä–æ–≤)
--	‚Ä¢	B ‚Äî —Å—Ä–µ–¥–Ω–∏–µ –ø–æ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
--	‚Ä¢	C ‚Äî –Ω–∞–∏–º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ (–º–Ω–æ–≥–æ, –Ω–æ –ø—Ä–∏–Ω–æ—Å—è—Ç –º–∞–ª–æ)
--
--üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞–º–∏, —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Ñ–æ–∫—É—Å –ø—Ä–æ–¥–∞–∂.

--–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤:
--
--–ì—Ä—É–ø–ø–∞ "A" --> —Ç–æ–≤–∞—Ä—ã —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–ª–µ–π –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏ –¥–æ 80% –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ;
--–ì—Ä—É–ø–ø–∞ "B" --> —Ç–æ–≤–∞—Ä—ã —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–ª–µ–π –ø—Ä–æ–¥–∞–∂/–≤—ã—Ä—É—á–∫–∏ –¥–æ 95% –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ;
--–ì—Ä—É–ø–ø–∞ "C" --> –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.
--
--–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º, –æ–±—ä–µ–º–æ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–±—ä–µ–º–æ–º –≤—ã—Ä—É—á–∫–∏.
--–ü—Ä–∏–≥–æ–¥—è—Ç—Å—è –æ–±–æ–±—â–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
--–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Ç–æ–≥–∞ –∏ —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
--–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.
with group_name as (
	select
		name ,
		sum(price * quantity) as revenue ,
		sum(quantity) as amount
	from
		pizza_full_data
	where year = 2015
	group by
		name
)
select
	name ,
	case
		when round(sum(amount) over(order by amount desc rows between unbounded preceding and current row) / sum(amount) over() * 100.0,3) <= 80 then 'A'
		when round(sum(amount) over(order by amount desc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / sum(amount) over() * 100.0,3) <= 95 then 'B'
		else 'C'
	end as abc_amount ,
	case
		when round(sum(revenue) over(order by revenue desc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / sum(revenue) over() * 100.0,3) <= 80 then 'A'
		when round(sum(revenue) over(order by revenue desc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / sum(revenue) over() * 100.0,3) <= 95 then 'B'
		else 'C'
	end as abc_revenue
from
	group_name




--                                                   LTV –ö–û–ì–û–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ù–ê–õ–û–ì
--–ë–µ—Ä—ë–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏.
--–î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –Ω–∞—Ö–æ–¥–∏–º –µ—ë –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –ø–æ–∫—É–ø–∫–∏ ‚Äî —ç—Ç–æ –∏ –µ—Å—Ç—å –∫–æ–≥–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.
--–°—á–∏—Ç–∞–µ–º, **—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏** –∫–ª–∏–µ–Ω—Ç–∞. –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è **"–≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞"**.
--–°–º–æ—Ç—Ä–∏–º, –∫–∞–∫–æ–π —Å–∞–º—ã–π "–¥–∞–ª—å–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç" –∫–ª–∏–µ–Ω—Ç–∞ –≤ –¥–Ω—è—Ö –æ—Ç –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ ‚Äî –Ω—É–∂–Ω–æ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
--–ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–≥–æ—Ä—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.

WITH data_cohort AS (
    SELECT
        card,
        datetime,
        FIRST_VALUE(to_char(datetime, 'YYYY-MM')) OVER (PARTITION BY card ORDER BY datetime) AS cohort,
        EXTRACT(days FROM datetime - FIRST_VALUE(datetime) OVER (PARTITION BY card ORDER BY datetime)) AS df_days,
        summ
    FROM checks
    WHERE card LIKE '2000%'
    ORDER BY card
)
SELECT
    cohort,
    COUNT(DISTINCT card) AS cnt_customer,
    MAX(df_days) AS max_df_days,
    ROUND(SUM(CASE WHEN df_days = 0 THEN summ END) / COUNT(DISTINCT card)) AS "0_day",
    ROUND(CASE WHEN MAX(df_days) > 0 THEN SUM(CASE WHEN df_days <= 30 THEN summ END) / COUNT(DISTINCT card) END) AS "30_day",
    ROUND(CASE WHEN MAX(df_days) > 30 THEN SUM(CASE WHEN df_days <= 60 THEN summ END) / COUNT(DISTINCT card) END) AS "60_day",
    ROUND(CASE WHEN MAX(df_days) > 60 THEN SUM(CASE WHEN df_days <= 90 THEN summ END) / COUNT(DISTINCT card) END) AS "90_day",
    ROUND(CASE WHEN MAX(df_days) > 90 THEN SUM(CASE WHEN df_days <= 180 THEN summ END) / COUNT(DISTINCT card) END) AS "180_day",
    ROUND(CASE WHEN MAX(df_days) > 180 THEN SUM(CASE WHEN df_days <= 300 THEN summ END) / COUNT(DISTINCT card) END) AS "300_day",
    ROUND(CASE WHEN MAX(df_days) > 300 THEN SUM(CASE WHEN df_days <= 400 THEN summ END) / COUNT(DISTINCT card) END) AS "400_day"
FROM data_cohort
GROUP BY cohort
ORDER BY cohort

with diff_table as (	
	select
		distinct
		ord.customer_id ,
		ord.check_id ,
		pr.category_id ,
		ord.order_date ,
		first_value(to_char(ord.order_date, 'YYYY-MM-DD')) over(partition by ord.customer_id order by ord.order_date) as cohort_first ,
		last_value(to_char(ord.order_date, 'YYYY-MM-DD')) over(partition by ord.customer_id order by ord.order_date) as cohort_last ,
		ord.order_date - first_value(ord.order_date) over(partition by ord.customer_id, pr.category_id order by ord.order_date) as diff_days
	from
		sales.orders as ord 
		join 
			sales.order_details as ord_d
			on
				ord.check_id = ord_d.check_id
		join
			sales.products as pr
			on
				ord_d.product_uuid = pr.product_uuid
)
select
	customer_id ,
	category_id ,
	count(distinct check_id) as cnt_orders
from
	diff_table
where 
	diff_days between 1 and 90
group by
	customer_id ,
	category_id
having 
	count(distinct check_id) > 2
order by
	count(distinct check_id) desc;



    
-- –ü–æ—Å—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º –∏—Ç–æ–≥–æ–º (–∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ):
SELECT
	"year" ,
	"month" ,
	income ,
	expense ,
	sum(income) over(order by "year" , "month" rows between unbounded preceding and current row) as t_income ,
	sum(expense) over(order by "year" , "month" rows between unbounded preceding and current row) as t_expense ,
	round(
		sum(income) over(order by "year" , "month" rows between unbounded preceding and current row)
		-
		sum(expense) over(order by "year" , "month" rows between unbounded preceding and current row)
		) as t_profit
from
	expenses

-- –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞
-- –†–∞—Å—Å—á–∏—Ç–∞–µ–º –≤—ã—Ä—É—á–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º –∏—Ç–æ–≥–æ–º –ø–æ –º–µ—Å—è—Ü–∞–º –≤ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –∑–∞ –≤—Å–µ –≥–æ–¥—ã
-- (–±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥–æ–¥—ã)
WITH data_sum AS (
    SELECT
        EXTRACT(YEAR FROM o.order_date) AS year_order,
        EXTRACT(MONTH FROM o.order_date) AS year_month_num,
        TO_CHAR(o.order_date, 'Month') AS month_order,
        ROUND(SUM(od.unit_price * od.quantity)) AS revenue
    FROM orders o
    JOIN order_details od ON o.order_id = od.order_id
    GROUP BY
        EXTRACT(YEAR FROM o.order_date),
        EXTRACT(MONTH FROM o.order_date),
        TO_CHAR(o.order_date, 'Month')
    ORDER BY
        EXTRACT(YEAR FROM o.order_date),
        EXTRACT(MONTH FROM o.order_date),
        TO_CHAR(o.order_date, 'Month')
)
SELECT
    year_order,
    year_month_num,
    month_order,
    revenue,
    SUM(revenue) OVER (ORDER BY year_order, year_month_num ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cum_revenue
FROM data_sum
ORDER BY year_order, year_month_num

-- –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–ê–ú–´–ô –î–û–†–û–ì–û–ô –ü–†–û–î–£–ö–¢ –í –ö–ê–ñ–î–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò.
-- –µ—Å–ª–∏ –±—ã–ª —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–æ –≤ –æ–∫–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ order by –º—ã –±—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ–±—ã—á–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
with d_rank as (
select
	c.category_name,
	p.product_name,
	p.unit_price ,
	dense_rank() over(partition by p.category_id order by p.unit_price DESC) as dns_rank
from
	products p
join
	categories c
	on p.category_id = c.category_id
	)
select
	category_name,
	product_name,
	unit_price
from
	d_rank
where
	dns_rank = 1
order by
	unit_price DESC

-- –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ü–†–û–¶–ï–ù–¢–ù–û–ï –°–û–û–¢–ù–û–®–ï–ù–ò–Ø –ö–û–õ-–í–ê –¢–û–í–ê–†–ê –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
select
	p.product_name ,
	p.category_id,
	p.units_in_stock,
	sum(p.units_in_stock) over(partition by p.category_id) as Total_Category_sum,
	round(p.units_in_stock * 100.0 / sum(p.units_in_stock) over(partition by p.category_id)) as per
from
	products p
order by
	p.category_id ,
	per DESC

-- 1.–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—Ö–æ–¥–∏—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é(cnt_product);
-- 2.–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏(avg_units_stock);
-- 3.–ö–∞–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —Ü–µ–Ω–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏(diff).
select
	p.product_name ,
	p.category_id,
	p.units_in_stock,
	count(p.product_name ) over(partition by p.category_id) as cnt_product,
	round(avg(p.unit_price) over(partition by p.category_id)) as average,
	round(p.unit_price - avg(p.unit_price) over(partition by p.category_id)) * 100.0
		/ avg(p.unit_price) over(partition by p.category_id) as DIFF
from
	products p
order by
	p.category_id ,
	p.unit_price ,
	p.product_name

-- –≤—ã–≤–µ—Å—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã —Ä–∞–∑–±–∏—Ç—ã–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤ –≥–æ—Ä–æ–¥–µ
with t_salary as (
	SELECT
		name ,
		city ,
		salary ,
		last_value(salary) over(partition by city order by salary rows between unbounded preceding and unbounded following) as max_salary_city
	from
		employees
	order by
		city ,
		salary
)
select
	name ,
	city ,
	salary ,
	round((salary / max_salary_city) * 100.0) as percent
from
	t_salary


-- –≤—ã–≤–µ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ú —Å—Ç–æ–ª–±—Ü–æ–º –ó–ê–†–ü–õ–ê–¢–´ –ø–æ –î–ï–ü–û–†–¢–ê–ú–ï–ù–¢–£ ,
-- –≤—ã–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –¥–µ–ø–æ—Ä—Ç–∞–º–µ–Ω—Ç–µ
select
	name ,
	department ,
	salary ,
	first_value(salary) over(partition by department order by salary rows between unbounded preceding and unbounded following) as low ,
	last_value(salary) over(partition by department order by salary rows between unbounded preceding and unbounded following) as high
from
	employees
order by
	department ,
	salary ,
	id


--  –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–æ–ª–±–µ—Ü –ó–ê–†–ü–õ–ê–¢–´ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤—Å–µ–º –î–ï–ü–û–†–¢–ê–ú–ï–ù–¢–ê–ú ,
-- –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞ —Å–∫–æ–ª—å–∫–æ –±–æ–ª—å—à–µ), –∏–º—è –∏ –¥–µ–ø–æ—Ä—Ç–∞–º–µ–Ω—Ç
with t_sal as (
	select
		name ,
		department ,
		salary ,
		lag(salary, 1) over() as prev_salary ,
		lag(name, 1) over() as prev_name ,
		lag(department, 1) over() as prev_department
	FROM
		employees e
	order by
		salary ,
		id
)
select
	name ,
	department ,
	salary ,
	prev_name ,
	prev_department ,
	prev_salary ,
	round((salary - prev_salary) * 100.0 / prev_salary) as diff_percent
from
	t_sal




-- FRAMES
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞:
ROWS|RANGE|GROUPS BETWEEN X AND Y

ROWS ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏, ROWS –æ–ø–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏.

–ù–∞—á–∞–ª–æ —Ñ—Ä–µ–π–º–∞ (X) –º–æ–∂–µ—Ç –±—ã—Ç—å:

CURRENT ROW ‚Äî —Ñ—Ä–µ–π–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏;
N PRECEDING‚Äî —Ñ—Ä–µ–π–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å N-–π —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–µ–π;
N FOLLOWING ‚Äî —Ñ—Ä–µ–π–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å N-–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π;
UNBOUNDED FOLLOWING ‚Äî —Ñ—Ä–µ–π–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ü–∏–∏.
–ö–æ–Ω–µ—Ü —Ñ—Ä–µ–π–º–∞ (Y) –º–æ–∂–µ—Ç –±—ã—Ç—å:

CURRENT ROW ‚Äî —Ñ—Ä–µ–π–º –¥–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏;
N PRECEDING ‚Äî —Ñ—Ä–µ–π–º –¥–æ N-–π —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–µ–π;
N FOLLOWING ‚Äî —Ñ—Ä–µ–π–º –¥–æ N-–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π;
UNBOUNDED FOLLOWING ‚Äî —Ñ—Ä–µ–π–º –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ü–∏–∏.
–ü—Ä–∏–º–µ—Ä (1): —Ñ—Ä–µ–π–º –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É

ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
–ü—Ä–∏–º–µ—Ä (2): —Ñ—Ä–µ–π–º –≤–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ

ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
–§—É–Ω–∫—Ü–∏–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ñ—Ä–µ–π–º—ã:

—Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ—â–µ–Ω–∏—è FIRST_VALUE(), LAST_VALUE(), NTH_VALUE();
–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏;
–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ –≤—Å–µ–π –ø–∞—Ä—Ç–∏—Ü–∏–µ–π (PARTITION BY) –ª–∏–±–æ —Å–æ –≤—Å–µ–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏.



-- postgres admin

-- –¢–∞–±–ª–∏—Ü–∞ employees
id	name	department_id	salary	hire_date
1	Alice	1	            5000	2020-01-15
2	Bob	    2	            6000	2019-03-10
3	Charlie	3	            5500	2021-06-20
4	David	1	            5200	2018-07-30
5	Eva	    2	            6500	2022-01-25

-- –¢–∞–±–ª–∏—Ü–∞ departments
id	name
1	Sales
2	IT
3	HR
4	Marketing

1. SELECT
–í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.

-- PostgreSQL –∏ MySQL
SELECT * FROM employees;
SELECT name, salary FROM employees WHERE department_id = 2;

2. WHERE
–£—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π.

-- PostgreSQL –∏ MySQL
SELECT * FROM employees WHERE salary > 5500;
SELECT * FROM employees WHERE hire_date > '2020-01-01';

3. ORDER BY
–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º.

-- PostgreSQL –∏ MySQL
SELECT * FROM employees ORDER BY salary DESC;
SELECT name, hire_date FROM employees ORDER BY hire_date ASC;

4. LIMIT
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Å—Ç—Ä–æ–∫.

-- PostgreSQL –∏ MySQL
SELECT * FROM employees LIMIT 3;
SELECT name, salary FROM employees WHERE department_id = 1 LIMIT 1;

5. GROUP BY
–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.

-- PostgreSQL –∏ MySQL
SELECT department_id, AVG(salary) FROM employees GROUP BY department_id;
SELECT department_id, COUNT(*) FROM employees GROUP BY department_id;

6. HAVING
–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

-- PostgreSQL –∏ MySQL
SELECT department_id, AVG(salary) FROM employees GROUP BY department_id HAVING AVG(salary) > 5500;
SELECT department_id, COUNT(*) FROM employees GROUP BY department_id HAVING COUNT(*) > 1;

7. JOIN
–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

-- INNER JOIN –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏—Ö –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏
SELECT employees.name, departments.name AS dept_name
FROM employees
INNER JOIN departments ON employees.department_id = departments.id;

-- LEFT JOIN –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ (–¥–∞–∂–µ –µ—Å–ª–∏ —É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
SELECT employees.name, departments.name AS dept_name
FROM employees
LEFT JOIN departments ON employees.department_id = departments.id;

8. UNION
–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–≤—É—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

-- PostgreSQL –∏ MySQL
SELECT name FROM employees WHERE department_id = 1
UNION
SELECT name FROM employees WHERE department_id = 2;

9. INSERT
–í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.

-- PostgreSQL –∏ MySQL
INSERT INTO employees (name, department_id, salary, hire_date)
VALUES ('Frank', 4, 7000, '2023-01-15');

10. UPDATE
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

-- PostgreSQL –∏ MySQL
UPDATE employees SET salary = salary + 500 WHERE department_id = 1;
UPDATE employees SET department_id = 4 WHERE id = 3;

11. DELETE
–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.

-- PostgreSQL –∏ MySQL
DELETE FROM employees WHERE salary < 5500;
DELETE FROM employees WHERE department_id = 3;

12. COUNT
–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è–º.

-- PostgreSQL –∏ MySQL
SELECT COUNT(*) FROM employees;
SELECT COUNT(*) FROM employees WHERE department_id = 2;

13. AVG
–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–ª—è.

-- PostgreSQL –∏ MySQL
SELECT AVG(salary) FROM employees;
SELECT department_id, AVG(salary) FROM employees GROUP BY department_id;

14. MAX –∏ MIN
–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π.

-- PostgreSQL –∏ MySQL
SELECT MAX(salary) FROM employees;
SELECT MIN(salary) FROM employees WHERE department_id = 1;

15. DISTINCT
–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–±–æ—Ä–∫–∏.

-- PostgreSQL –∏ MySQL
SELECT DISTINCT department_id FROM employees;
SELECT DISTINCT department_id, COUNT(*) FROM employees GROUP BY department_id;

16. LIKE, REGEXP
–º—ã —Ö–æ—Ç–∏–º –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—å—è –ø–æ—á—Ç–∞ –ª–µ–∂–∏—Ç –≤ –¥–æ–º–µ–Ω–µ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è ¬´hotmail¬ª.
-- PostgreSQL –∏ MySQL
SELECT name, email FROM Users
WHERE email LIKE '%@hotmail.%'

–ü–æ–ª—É—á–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—å–∏ –∏–º–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ ¬´John¬ª:
SELECT * FROM Users WHERE name REGEXP '^John'

–í—ã–≤–µ–¥–µ–º –≤—Å–µ —à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –±—É–∫–≤—É ¬´e¬ª –∏–ª–∏ ¬´y¬ª:
SELECT * FROM  Subject WHERE name REGEXP '[ey]$'

–ù–∞–π–¥—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á–µ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã o–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ¬´@outlook.com¬ª –∏–ª–∏ –Ω–∞ ¬´@icloud.com¬ª:
SELECT * FROM Users WHERE email REGEXP '@(outlook.com|icloud.com)$'

–ù–∞–π–¥—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä ¬´2¬ª –∏ ¬´8¬ª
SELECT * FROM Users WHERE phone_number REGEXP '^[^28]*$'

–ù–∞–π–¥—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ ¬´+7¬ª
SELECT name, phone_number FROM Users WHERE phone_number REGEXP '^\\+7'

17. COALESCE
is null —Ç–æ 0 –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
COALESCE(COUNT(p.passenger), 0) AS count
–∞–Ω–∞–ª–æ–≥ case
CASE
    WHEN COUNT(p.passenger) IS NULL THEN 0
    ELSE COUNT(p.passenger)
END AS count

18. IN –∏ COMMON TABLE EXPRASSION CTE (–ø–æ–¥–∑–∞–ø—Ä–æ—Å)
SELECT * FROM Users WHERE id IN # —Ç–µ–ª–æ –ø–æ–¥–∑–∞–ø—Ä–æ—Å–∞ #(
    SELECT DISTINCT owner_id FROM Rooms WHERE price >= 150
) # body CTE #

19. —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –ø–æ –¥–∞—Ç–µ
--- MYSQL
SELECT TIMESTAMPDIFF(YEAR, '2003-07-03 14:10:26', NOW());
-- format string
SELECT  CAST("2022-06-16 16:37:23" AS DATETIME) AS datetime_1,
        CAST("2014/02/22 16*37*22" AS DATETIME) AS datetime_2,
        CAST("20220616163723" AS DATETIME) AS datetime_3,
        CAST("2021-02-12" AS DATE) AS date_1,
        CAST("160:23:13" AS TIME) AS time_1,
        CAST("89" AS YEAR) AS year

---POSTGRES
SELECT DATE_PART('year', NOW()) - DATE_PART('year', TIMESTAMP '2003-07-03 14:10:26');
SELECT EXTRACT(YEAR FROM AGE(NOW(), TIMESTAMP '2003-07-03 14:10:26'));
-- format string
SELECT
    '2022-06-16 16:37:23'::TIMESTAMP AS datetime_1,
    NULLIF('2014/02/22 16*37*22', '')::TIMESTAMP AS datetime_2, -- –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç NULL
    TO_TIMESTAMP('20220616163723', 'YYYYMMDDHH24MISS') AS datetime_3,
    '2021-02-12'::DATE AS date_1,
    '160:23:13'::TIME AS time_1,
    '89'::YEAR AS year -- –ì–æ–¥ –≤ –≤–∏–¥–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤, PostgreSQL –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –ø–æ–ª–Ω—ã–π –≥–æ–¥.


-- type data
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50),
    email VARCHAR(100) UNIQUE,
    birth_date DATE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE
);

-- group by
-- –í —á–∞—Å—Ç–∏ SELECT –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ GROUP BY,
-- –∏–ª–∏ –∞–≥—Ä–µ–≥–∏—Ä—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏(SUM(), MAX(),MIN(),AVG(), COUNT()), –Ω–∞–ø—Ä–∏–º–µ—Ä:
SELECT user_id, event_date, SUM(revenue)
FROM game_events
GROUP BY user_id, event_date


-- auto increment
CREATE TABLE employee (
   employ_id SERIAL PRIMARY KEY,
   fname VARCHAR(30),
   lname VARCHAR(30)
);

-- show table
desc person;

-- add values
insert into person
	(person_id, fname, lname, gender, birth_date)
	values (null, 'William', 'Turner', 'M', '1972-05-27');

-- show select values
select person_id, fname, lname, birth_date
	from person
	where person_id = 1;

-- update
UPDATE person
	SET adress = '1225 Tremont St.',
		city = 'Boston',
		state = 'MA',
		country = 'USA',
		postal_code = '02138'
	WHERE person_id = 1;

-- uniq values
SELECT DISTINCT event_name
FROM game_events

-- delete
delete from person
	where person_id = 2;


### –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

MySQL:
CREATE DATABASE db_name;
PostgreSQL:
CREATE DATABASE db_name;
### –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

MySQL:
DROP DATABASE db_name;
PostgreSQL:
DROP DATABASE db_name;
### –í—ã–±–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

MySQL:
USE db_name;
PostgreSQL: (–≤ PostgreSQL –Ω–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É \c)
\c db_name
### –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

MySQL:
SHOW DATABASES;
PostgreSQL:
\l
### –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É

MySQL:
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
PostgreSQL:
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);

### –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã

MySQL:
desc person;
PostgreSQL:
select * from person;

### –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏

MySQL:
INSERT INTO table_name (column1, column2, ...)
VALUES (value1, value2, ...);
PostgreSQL:
INSERT INTO table_name (column1, column2, ...)
VALUES (value1, value2, ...);
### –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏

MySQL:
UPDATE table_name
SET column1 = new_value1, column2 = new_value2, ...
WHERE condition;
PostgreSQL:
UPDATE table_name
SET column1 = new_value1, column2 = new_value2, ...
WHERE condition;
### –í—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ

MySQL:
SELECT column1, column2, ...
FROM table_name
WHERE condition;
PostgreSQL:
SELECT column1, column2, ...
FROM table_name
WHERE condition;
### –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å

MySQL:
DELETE FROM table_name
WHERE condition;
PostgreSQL:
DELETE FROM table_name
WHERE condition;
### –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã

MySQL:
TRUNCATE TABLE table_name;
PostgreSQL:
TRUNCATE TABLE table_name;


FRAMES

–í –æ–±—â–µ–º —Å–ª—É—á–∞–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:

{ ROWS | GROUPS | RANGE } BETWEEN frame_start AND frame_end [ EXCLUDE exclusion ]
–§—Ä–µ–π–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:

RANGE BETWEEN unbounded preceding AND current row EXCLUDE no others
–¢–æ–ª—å–∫–æ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ñ—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è:

—Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ—â–µ–Ω–∏—è first_value(), last_value(), nth_value();
–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: count(), avg(), sum(), ...
–£ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ñ—Ä–µ–π–º –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–µ–Ω —Å–µ–∫—Ü–∏–∏.

–¢–∏–ø —Ñ—Ä–µ–π–º–∞

–°—Ç—Ä–æ–∫–æ–≤—ã–µ (rows) –æ–ø–µ—Ä–∏—Ä—É—é—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏.
–ì—Ä—É–ø–ø–æ–≤—ã–µ (groups) –æ–ø–µ—Ä–∏—Ä—É—é—Ç –≥—Ä—É–ø–ø–∞–º–∏ –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–±–æ—Ä–æ–º –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ order by;
–î–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ (range) –æ–ø–µ—Ä–∏—Ä—É—é—Ç –≥—Ä—É–ø–ø–∞–º–∏ –∑–∞–ø–∏—Å–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ order by –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.
–ì—Ä–∞–Ω–∏—Ü—ã —Ñ—Ä–µ–π–º–∞ (frame_start / frame_end)

unbounded preceding
N preceding
current row
N following
unbounded following
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ unbounded preceding –∏ unbounded following –≤—Å–µ–≥–¥–∞ –æ–∑–Ω–∞—á–∞—é—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ü–∏–∏. current row –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ñ—Ä–µ–π–º–æ–≤ –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å, –∞ –¥–ª—è –≥—Ä—É–ø–æ–≤—ã—Ö –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã—Ö ‚Äî —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –∏ –≤—Å–µ —Ä–∞–≤–Ω—ã–µ –µ–π (–ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –∏–∑ order by). N preceding –∏ N following –æ–∑–Ω–∞—á–∞—é—Ç:

–¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ñ—Ä–µ–π–º–æ–≤ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ / –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π;
–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ñ—Ä–µ–π–º–æ–≤ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–æ / –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π;
–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤ ‚Äî –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏.
–ò—Å–∫–ª—é—á–µ–Ω–∏—è (exclusion)

NO OTHERS. –ù–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞—Ç—å. –í–∞—Ä–∏–∞–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
CURRENT ROW. –ò—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å.
GROUP. –ò—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –∏ –≤—Å–µ —Ä–∞–≤–Ω—ã–µ –µ–π (–ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ order by).
TIES. –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å, –Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–∞–≤–Ω—ã–µ –µ–π.
–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è

–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ñ—Ä–µ–π–º –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–∫–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é FILTER –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–π CASE:

func(column) FILTER (WHERE condition) OVER window

func(
  CASE WHEN condition THEN expression ELSE other END
) OVER window